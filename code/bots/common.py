import chess


POS_INF = 10**7
NEG_INF = -POS_INF

piece_values = {
    chess.PAWN: 100,
    chess.KNIGHT: 300,
    chess.BISHOP: 300,
    chess.ROOK: 500,
    chess.QUEEN: 900,
    chess.KING: 0,
}


def get_piece_value(piece: chess.Piece | int | str) -> int:

    if isinstance(piece, str):
        return piece_values[chess.Piece.from_symbol(piece).piece_type]

    if isinstance(piece, chess.Piece):
        return piece_values[piece.piece_type]

    if isinstance(piece, int) and piece in piece_values:
        return piece_values[piece]

    raise Exception(f"encountered invalid piece: {type(piece)} {piece}")


def calc_eval(board: chess.Board) -> int:
    _value = 0
    for _piece in piece_values.keys():
        _value += len(board.pieces(_piece, chess.WHITE)) * get_piece_value(_piece)
        _value -= len(board.pieces(_piece, chess.BLACK)) * get_piece_value(_piece)
    return _value if board.turn == chess.WHITE else -_value


def calc_active_square_eval(board: chess.Board) -> int:
    _value = 0

    _white_active_squares = 0
    _black_active_squares = 0
    for _move in board.legal_moves:
        _piece = board.piece_at(_move.from_square)
        if not _piece:
            continue
        _active_squares_bonus = get_piece_value(_piece) / 100
        if _piece.color == chess.WHITE:
            _white_active_squares += _active_squares_bonus
        else:
            _black_active_squares += _active_squares_bonus

    _value += _white_active_squares
    _value += _black_active_squares

    return _value

ENDGAME_THRESHOLD = 2400
PIECE_SQUARE_TABLES = {
    chess.PAWN: [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        10,
        10,
        20,
        30,
        30,
        20,
        10,
        10,
        5,
        5,
        10,
        25,
        25,
        10,
        5,
        5,
        0,
        0,
        0,
        20,
        20,
        0,
        0,
        0,
        5,
        -5,
        -10,
        0,
        0,
        -10,
        -5,
        5,
        5,
        10,
        10,
        -20,
        -20,
        10,
        10,
        5,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ],
    chess.KNIGHT: [
        -50,
        -40,
        -30,
        -30,
        -30,
        -30,
        -40,
        -50,
        -40,
        -20,
        0,
        0,
        0,
        0,
        -20,
        -40,
        -30,
        0,
        10,
        15,
        15,
        10,
        0,
        -30,
        -30,
        5,
        15,
        20,
        20,
        15,
        5,
        -30,
        -30,
        0,
        15,
        20,
        20,
        15,
        0,
        -30,
        -30,
        5,
        10,
        15,
        15,
        10,
        5,
        -30,
        -40,
        -20,
        0,
        5,
        5,
        0,
        -20,
        -40,
        -50,
        -40,
        -30,
        -30,
        -30,
        -30,
        -40,
        -50,
    ],
    chess.BISHOP: [
        -20,
        -10,
        -10,
        -10,
        -10,
        -10,
        -10,
        -20,
        -10,
        0,
        0,
        0,
        0,
        0,
        0,
        -10,
        -10,
        0,
        5,
        10,
        10,
        5,
        0,
        -10,
        -10,
        5,
        5,
        10,
        10,
        5,
        5,
        -10,
        -10,
        0,
        10,
        10,
        10,
        10,
        0,
        -10,
        -10,
        10,
        10,
        10,
        10,
        10,
        10,
        -10,
        -10,
        5,
        0,
        0,
        0,
        0,
        5,
        -10,
        -20,
        -10,
        -10,
        -10,
        -10,
        -10,
        -10,
        -20,
    ],
    chess.ROOK: [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        10,
        10,
        10,
        10,
        10,
        10,
        5,
        -5,
        0,
        0,
        0,
        0,
        0,
        0,
        -5,
        -5,
        0,
        0,
        0,
        0,
        0,
        0,
        -5,
        -5,
        0,
        0,
        0,
        0,
        0,
        0,
        -5,
        -5,
        0,
        0,
        0,
        0,
        0,
        0,
        -5,
        -5,
        0,
        0,
        0,
        0,
        0,
        0,
        -5,
        0,
        0,
        0,
        5,
        5,
        0,
        0,
        0,
    ],
    chess.QUEEN: [
        -20,
        -10,
        -10,
        -5,
        -5,
        -10,
        -10,
        -20,
        -10,
        0,
        0,
        0,
        0,
        0,
        0,
        -10,
        -10,
        0,
        5,
        5,
        5,
        5,
        0,
        -10,
        -5,
        0,
        5,
        5,
        5,
        5,
        0,
        -5,
        0,
        0,
        5,
        5,
        5,
        5,
        0,
        -5,
        -10,
        5,
        5,
        5,
        5,
        5,
        0,
        -10,
        -10,
        0,
        5,
        0,
        0,
        0,
        0,
        -10,
        -20,
        -10,
        -10,
        -5,
        -5,
        -10,
        -10,
        -20,
    ],
    chess.KING: {
        "middle game": [
            -30,
            -40,
            -40,
            -50,
            -50,
            -40,
            -40,
            -30,
            -30,
            -40,
            -40,
            -50,
            -50,
            -40,
            -40,
            -30,
            -30,
            -40,
            -40,
            -50,
            -50,
            -40,
            -40,
            -30,
            -30,
            -40,
            -40,
            -50,
            -50,
            -40,
            -40,
            -30,
            -20,
            -30,
            -30,
            -40,
            -40,
            -30,
            -30,
            -20,
            -10,
            -20,
            -20,
            -20,
            -20,
            -20,
            -20,
            -10,
            20,
            20,
            0,
            0,
            0,
            0,
            20,
            20,
            20,
            30,
            10,
            0,
            0,
            10,
            30,
            20,
        ],
        "end game": [
            -50,
            -40,
            -30,
            -20,
            -20,
            -30,
            -40,
            -50,
            -30,
            -20,
            -10,
            0,
            0,
            -10,
            -20,
            -30,
            -30,
            -10,
            20,
            30,
            30,
            20,
            -10,
            -30,
            -30,
            -10,
            30,
            40,
            40,
            30,
            -10,
            -30,
            -30,
            -10,
            30,
            40,
            40,
            30,
            -10,
            -30,
            -30,
            -10,
            20,
            30,
            30,
            20,
            -10,
            -30,
            -30,
            -30,
            0,
            0,
            0,
            0,
            -30,
            -30,
            -50,
            -30,
            -30,
            -30,
            -30,
            -30,
            -30,
            -50,
        ],
    },
}

def calc_heu_eval(board: chess.Board) -> int:
    _value = 0

    # check for endgame
    _material_score = 0
    for _piece_type, _base_value in piece_values.items():
        if _piece_type == chess.KING:
            continue
        _material_score += _base_value * (
            len(board.pieces(_piece_type, chess.WHITE))
            + len(board.pieces(_piece_type, chess.BLACK))
        )
    _endgame = _material_score < ENDGAME_THRESHOLD

    for _piece_type, _base_value in piece_values.items():
        _table: list[int]
        if _piece_type == chess.KING:
            _table = (
                PIECE_SQUARE_TABLES[chess.KING]["end game"]
                if _endgame
                else PIECE_SQUARE_TABLES[chess.KING]["middle game"]
            )
        else:
            _table = PIECE_SQUARE_TABLES[_piece_type]

        # white
        for _square in board.pieces(_piece_type, chess.WHITE):
            _value += _table[_square]

        # black
        for _square in board.pieces(_piece_type, chess.BLACK):
            _mirrored_square = chess.square_mirror(_square)
            _value -= _table[_mirrored_square]

    return _value if board.turn == chess.WHITE else -_value

